generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  courseId      String   @id @default(uuid()) @db.Uuid
  courseName    String
  courseCreator String
  createdAt     DateTime @default(now()) @db.Timestamptz()
  updatedAt     DateTime @updatedAt @db.Timestamptz()
  createdBy     String
  updatedBy     String

  // current version pointer (optional)
  currentVersionId String?        @unique @db.Uuid // ‚Üê make it unique
  currentVersion   CourseVersion? @relation("CurrentCourseVersion", fields: [currentVersionId], references: [courseVersionId])

  versions  CourseVersion[]  @relation("CourseToVersions")
  questions CourseQuestion[]
}

model CourseVersion {
  courseVersionId String @id @default(uuid()) @db.Uuid
  courseId        String @db.Uuid
  version         Int

  course     Course           @relation("CourseToVersions", fields: [courseId], references: [courseId])
  currentFor Course?          @relation("CurrentCourseVersion") // optional backref (can omit)
  questions  CourseQuestion[]

  @@unique([courseId, version])
}

model CourseQuestion {
  courseQuestionId String @id @default(uuid()) @db.Uuid
  courseId         String @db.Uuid
  questionId       String @db.Uuid
  courseVersionId  String @db.Uuid

  course        Course        @relation(fields: [courseId], references: [courseId])
  question      Question      @relation(fields: [questionId], references: [questionId])
  courseVersion CourseVersion @relation(fields: [courseVersionId], references: [courseVersionId])
}

model Question {
  questionId       String       @id @default(uuid()) @db.Uuid
  questionSentence String
  answer           String
  options          String?
  questionType     QuestionType

  courseQuestions CourseQuestion[]
}

enum QuestionType {
  TRUE_FALSE
  MULTI_SELECT
  SHORT_ANSWER
}
