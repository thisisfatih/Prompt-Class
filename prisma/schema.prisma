generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  courseId      String   @id @default(uuid()) @db.Uuid
  courseName    String
  courseCreator String
  createdAt     DateTime @default(now()) @db.Timestamptz()
  updatedAt     DateTime @updatedAt @db.Timestamptz()
  createdBy     String
  updatedBy     String

  // current version pointer (optional)
  currentVersionId String?        @unique @db.Uuid // ‚Üê make it unique
  currentVersion   CourseVersion? @relation("CurrentCourseVersion", fields: [currentVersionId], references: [courseVersionId])

  versions        CourseVersion[]   @relation("CourseToVersions")
  questions       CourseQuestion[]
  PracticeSession PracticeSession[]
}

model CourseVersion {
  courseVersionId String @id @default(uuid()) @db.Uuid
  courseId        String @db.Uuid
  version         Int

  course          Course            @relation("CourseToVersions", fields: [courseId], references: [courseId])
  currentFor      Course?           @relation("CurrentCourseVersion") // optional backref (can omit)
  questions       CourseQuestion[]
  PracticeSession PracticeSession[]

  @@unique([courseId, version])
}

model CourseQuestion {
  courseQuestionId String @id @default(uuid()) @db.Uuid
  courseId         String @db.Uuid
  questionId       String @db.Uuid
  courseVersionId  String @db.Uuid

  course        Course        @relation(fields: [courseId], references: [courseId])
  question      Question      @relation(fields: [questionId], references: [questionId])
  courseVersion CourseVersion @relation(fields: [courseVersionId], references: [courseVersionId])
}

model Question {
  questionId       String       @id @default(uuid()) @db.Uuid
  questionSentence String
  answer           String
  options          String?
  questionType     QuestionType

  courseQuestions CourseQuestion[]
}

enum QuestionType {
  TRUE_FALSE
  MULTI_SELECT
  SHORT_ANSWER
}

model User {
  userId    String   @id @default(uuid()) @db.Uuid
  name      String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz()

  sessions PracticeSession[]
}

enum PracticeStatus {
  IN_PROGRESS
  COMPLETED
}

model PracticeSession {
  sessionId       String         @id @default(uuid()) @db.Uuid
  userId          String         @db.Uuid
  courseId        String         @db.Uuid
  courseVersionId String         @db.Uuid
  currentIndex    Int            @default(0)
  correctCount    Int            @default(0)
  totalQuestions  Int
  status          PracticeStatus @default(IN_PROGRESS)
  createdAt       DateTime       @default(now()) @db.Timestamptz()
  updatedAt       DateTime       @updatedAt @db.Timestamptz()

  user    User          @relation(fields: [userId], references: [userId])
  course  Course        @relation(fields: [courseId], references: [courseId])
  version CourseVersion @relation(fields: [courseVersionId], references: [courseVersionId])

  @@index([userId, courseId, courseVersionId, status])
}
